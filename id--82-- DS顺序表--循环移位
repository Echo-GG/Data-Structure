#include <iostream>
using namespace std;

class Table
{
private:
	int max_size;
	int real_size;
	int* arr;
public:
	Table(int n) :real_size(n)
	{
		max_size = 10000;
		arr = new int[max_size];
	}
	void init(int num[], int n)
	{
		real_size = n;
		for (int i = 0; i < real_size; i++)
		{
			arr[i] = num[i];
		}
		if (n > max_size)
		{
			cout << "error" << endl;
		}
		for (int i = 0; i < real_size; i++)
		{
			cout << arr[i] << " ";
		}
		cout << endl;
	}
	void move(int direct, int index)
	{
		index %= real_size;
		int* tmp = new int[real_size];
		if (direct) // 右移:direct == 1;
		{
			for (int i = 0; i < real_size; i++)
			{
				tmp[(i + index) % real_size] = arr[i];
			}
		}
		else // 左移:direct == 0;
		{
			for (int i = 0; i < real_size; i++)
			{
				tmp[(i - index + real_size) % real_size] = arr[i];
			}
		}
		for (int i = 0; i < real_size; i++)
		{
			arr[i] = tmp[i];
			cout << arr[i] << " ";
		}
		cout << endl;
		delete[]tmp;
	}
	~Table()
	{
		delete[]arr;
	}
};
int main()
{
	int n;
	cin >> n;
	int* arr = new int[n];
	for (int i = 0; i < n; i++)
	{
		cin >> *(arr + i);
	}
	Table table(n);
	table.init(arr, n);
	int direct1, index1;
	cin >> direct1 >> index1;
	table.move(direct1, index1);
	int direct2, index2;
	cin >> direct2 >> index2;
	table.move(direct2, index2);
	delete[]arr;
	return 0;
}
